1. STL
   stack: push, pop, top
   vector: 
          * We can use vector[i] to view elements but we cannot use vector[i] to set elements.
          * Use vector instead of array if you are not sure about size.
          * push_back: add element at the last position. 
          * insert
            single element (1): iterator insert (iterator position, const value_type& val);
            fill (2): void insert (iterator position, size_type n, const value_type& val);
            range (3): template <class InputIterator> void insert (iterator position, InputIterator first, InputIterator last);
            // inserting into a vector
            #include <iostream>
            #include <vector>
            
            int main ()
            {
              std::vector<int> myvector (3,100);
              std::vector<int>::iterator it;
            
              it = myvector.begin();
              it = myvector.insert ( it , 200 );
            
              myvector.insert (it,2,300);
            
              // "it" no longer valid, get a new one:
              it = myvector.begin();
            
              std::vector<int> anothervector (2,400);
              myvector.insert (it+2,anothervector.begin(),anothervector.end());
            
              int myarray [] = { 501,502,503 };
              myvector.insert (myvector.begin(), myarray, myarray+3);
            
              std::cout << "myvector contains:";
              for (it=myvector.begin(); it<myvector.end(); it++)
                std::cout << ' ' << *it;
              std::cout << '\n';
            
              return 0;
            }
            
            myvector contains: 501 502 503 300 300 400 400 200 100 100 100
            
2. Constructor 
   struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };
  
3. int to string
   to_string(42) /*Don't forget include string in the head file*/
   char to int -'0'
   int to char +'0'
   
4. Don't use itoa, it has been deprecated.
