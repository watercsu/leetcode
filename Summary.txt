1. STL
   stack: push, pop, top
   map: map<int,int> hashmap; hashmap[key]=value.
   vector: push_back,insert
          * vector<vector<int>> ret
            ret.push_back(vector<int>({num[i],num[j],num[k]}));
          * We can use vector[i] to view elements but we cannot use vector[i] to set elements.
          * Use vector instead of array if you are not sure about size.
          * push_back: add element at the last position. 
          * if you want to use ret[i].push_back before ret has value. Please initalize it as vector<vercotr<int>> ret(numRows,vector<int>());
          * vector<int> ret(rowIndex+1,1) initalize vector with value 1
          * Similar to string, you cannot use ret=NULL in C++.
          * sort usage: sort(ret.begin(),ret.end())
            Note: if ret is empty, sort(ret.begin(),ret.end()) will throw exception
          * insert
            single element (1): iterator insert (iterator position, const value_type& val);
            fill (2): void insert (iterator position, size_type n, const value_type& val);
            range (3): template <class InputIterator> void insert (iterator position, InputIterator first, InputIterator last);
            // inserting into a vector
            #include <iostream>
            #include <vector>
            
            int main ()
            {
              std::vector<int> myvector (3,100);
              std::vector<int>::iterator it;
            
              it = myvector.begin();
              it = myvector.insert ( it , 200 );
            
              myvector.insert (it,2,300);
            
              // "it" no longer valid, get a new one:
              it = myvector.begin();
            
              std::vector<int> anothervector (2,400);
              myvector.insert (it+2,anothervector.begin(),anothervector.end());
            
              int myarray [] = { 501,502,503 };
              myvector.insert (myvector.begin(), myarray, myarray+3);
            
              std::cout << "myvector contains:";
              for (it=myvector.begin(); it<myvector.end(); it++)
                std::cout << ' ' << *it;
              std::cout << '\n';
            
              return 0;
            }
            
            myvector contains: 501 502 503 300 300 400 400 200 100 100 100
            
   * Differenct between Map and Hashmap
     1.Map uses a red-black tree as the data structure, so the elements you put in there are sorted, 
      and insert/delete is O(log(n)). The elements need to be implement at least operator<.
     2.Hashmap uses a hash, so elements are unsorted, insert/delete is O(1). Elements need to implement 
      at least operator== and you need a hash function.
            
   * Difference between HashTable and Hashmap
   1.No hashTable in C++. HashMap使用Iterator。
   
   * When there is a pop operation for stack/vector etc. THERE MUST BE A CHECK IF STACK/VECTOR IS EMPTY.

2. Constructor 
   struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };
  
3. string tip
   * to_string(42) /*Don't forget include string in the head file*/
   * char to int -'0'
   * int to char +'0'
   * isdigit(char c) can be used to check if c can be converted to digit
   * isalnum(char c) can be used to check if c can be converted to digit or letter
   * cannot assign a NULL value to string in C++ as std::string is not a point type. Use s="" or s.empty() or s=std::string()
     to clear string in C++. But in C# we can assign a null to string
   * string s="abc", s.erase(0, 1) s="bc"
   * string s="abc", s.erase(1) s="a"
   * s.find_first_not_of(" ") //find first position which is not " "
   * s.find_last_not_of(" ") //find last positin which is not " "
   * s.find(' ') != string::npos //s contains ' ' 
   
4. Don't use itoa, it is non-standard C language function.

5. When it comes to string, note
   * there is char cannot be coveret to int, there is a function isdigit(char c) used to check it
   * need skip blank, need take care if the first letter is '+' or '-'
   * need think about int overflow. INT_MAX=2147483647 INT_MIN=-2147483648
   
6. Point && Reference
   * Don't need check if reference is NULL as reference cannot be NULL

7. When condition comes to i<num.size()-2 && num[i]==num[i-1], put compare at the front

8. LinkedList
   * DummyNode 
   * TestCase:
     a. List is empty
     b. List has one node
     c. List has lots of nodes

9. Utilities
   abs usage: abs(a-b)

10. Recurise
    One way to reduce time cost in recurise is using cache. Reference ClimbingStairs for detail
